Para acessar o postgresql, via terminal Windows:

- Abrir o CMD;
- Navegar até o endereço: C:\Program Files\PostgreSQL\13\bin ;
- Digitar o comando "psql", juntamente com o usuário registrado (ou configurado) no sistema, como no exemplo a seguir: psql -U postgres ;
- Inserir a senha do usuário (neste caso, como o usuário é o master, ou seja, criado na instalação do postgresql, insira a senha salva, durante uma das etapas de instalação da ferramenta);
- Pronto, agora você está conectado no seu banco de dado, no terminal do Windows.

Para acessar uma role, via terminal Windows:

- Abrir o CMD;
- Navegar até o endereço: C:\Program Files\PostgreSQL\13\bin ;
- Digitar o comando "psql", juntamente com o usuário registrado (ou configurado) no sistema, e o banco de dados, como no exemplo a seguir: psql -U professores auladb ;
- Inserir a senha do usuário (neste caso, como o usuário é o master, ou seja, criado na instalação do postgresql, insira a senha salva, durante uma das etapas de instalação da ferramenta);
- Pronto, agora você está conectado no seu banco de dado, no terminal do Windows.

Comandos básicos de navegação, do psql:

- Para voltar ao terminal corrente (no meu caso CMD, do Windows): \q
- Para entrar com um usuário: psql -U usuario
- Para entrar com uma role: psql -U role nomeBancoDeDados
- Para listar roles: \du 

Aula: Objetos e comandos do banco de dados

- Database: É o banco de dados. Grupo de schemas e seus objetos, como tabelas, types, views, funções, entre outros. Seus schemas e objetos não podem ser compartilhados entre si. Cada Database é separado um do outro, compartilhando apenas usuários/roles e configurações do cluster PostgreSQL;

- Schemas: É um grupo de objetos, como tabelas, types, views, funções, entre outros.É possível relacionar objetos entre diversos schemas. Por exemplo: schema public e schema curso podem ter tabelas com o mesmo nome (teste, por exemplo) relacionando-se entre si.

- Objetos: São as tabelas, views, funções, types, sequences, entre outros, pertencentes aos schemas.

- Comandos básicos Database: CREATE DATABASE nomeDataBase, ALTER DATABASE nomeDataBase RENAME TO novo_nomeDataBase, DROP DATABASE nomeDataBase .

- Comandos básicos Schema: CREATE SCHEMA nomeSchema [AUTHORIZATION role_specification], ALTER SCHEMA nomeSchema RENAME TO novoNome, DROP SCHEMA nomeSchema, CREATE SCHEMA IF NOT EXISTS nomeSchema [AUTHORIZATION role_specification] (boa prática), DROP SCHEMA IF EXISTS nomeSchema (boa prática) .

- Tabela = é um objeto que contém colunas de dados, baseado em seu domínio.

- Primary Key = é o conjunto de um mais dados, que não poderão ser repetidos, em uma tabela, e estes, serão chamados de chaves primárias.

- Foreign Key = é o conjunto de uma ou mais referências de primary keys, de outras tabelas.

- Tipos de dados, básicos, suportados no postgreSql: Numeric types, Character Types, Date/Time Types, Boolean Type .

- DML = Data Manipulation Language. Linguagem de manipulação de dados, como: INSERT, UPDATE, DELETE, SELECT (alguns consideram o SELECT, como DQL, que significa Data Query Language, ou linguagem de consulta de dados).

- DDL = Data Definition Language. Linguagem de definição de dados, como: CREATE, ALTER, DROP.

- ATENÇÃO: ao utilizar os comandos DML INSERT e DELETE, SEMPREE utilizar a clausula (ou, condição) WHERE, caso o contrário todos os campos de uma tabela, serão atualizados conforme o SET determinado, ou serão deletados. 
	Exemplo de UPDATE:
		UPDATE nomeTabela SET
		[campo1] = [novoValor],
		[campo2] = [novoValor] 
		WHERE campo1 = 1 AND campo2 = 2;
	Exemplo de DELETE:
		DELETE FROM nomeTabela
		WHERE codigo = 1;

- ATENÇÃO: ao utilizar o comando DML SELECT, evitar usar o famoso SELECT *.
	Exemplo de SELECT:
	SELECT campoTabela
	FROM nomeTabela
	WHERE codigo = 1;

- Para criar as tabelas nesta aula, vamos ir até a aba schemas, do banco de dados finanças, e clicar na opção Tools, na aba superior do pgadmin, escolher a opção query tool, e inserir os códigos necessários, para a criação das tabelas.

Aula: Conheça o DML e o Truncate

- Idempotência: Propriedade que algumas ações/operações possuem, possibilitando-as de serem executadas diversas vezes, sem alterar o resultado após a aplicação final. Por exemplo, o "IF EXISTS".

- Constraints = regras.

- SELECT, com like = SELECT nome FROM cliente WHERE email LIKE '%gmail' -- A consulta trará todos os nomes de clientes, que tiverem (EXATAMENTE) "@gmail", registrados na sua tabela.

- SELECT, com ilike = SELECT nome FROM cliente WHERE email ILIKE '%gmail.com' -- A consulta trará todos os nomes de clientes, que tiverem (INDEPENDENTE, DA ESCRITA, SEJA MAIÚSCULA OU NÃO DE "@gmail"), registrados na sua tabela.

- SELECT, com like (serve para ilike também), com '%texto%' = SELECT numero FROM banco WHERE nome ILIKE '%Bradesco%' -- A consulta irá retornar um numero, se encontrar em alguma parte do texto, do campo nome, a palavra Bradesco, indepente da forma escrita.

- ATENÇÃO: Quanto melhor (ou, mais inteligente), for a implementação de uma consulta, melhor será o desempenho, do seu retorno.

- Condições básicas (WHERE / AND / OR), de SELECT: = , >/>= , </<= , <>/!= , LIKE , ILIKE , IN.

- Idempotência, em INSERT = INSERT INTO agencia (banco_numero, numero, nome) VALUES (341, 1, 'Centro da Cidade') ON CONFLICT (banco_numero, numero) DO NOTHING; -- Se houver, algum conflito na PK (composto, por banco_numero, e numero), a operação não será realizada.

- Exemplo, de UPDATE, e DELETE: UPDATE tabela SET campo1 = novo_valor WHERE _condicao_ , DELETE FROM tabela SET campo1 = novo_valor WHERE _condicao_ .

- TRUNCATE = Esvazia a tabela.

Aula: Funções agregadas em PostgreSQL

- Funções básicas, apresentadas no curso = AVG, COUNT (opção HAVING), MAX, MIN, SUM

- OBS: O ATALHO, PARA SALVAR OS SCRIPTS DO QUERY TOOL USAMOS O ATALHO DO TECLADO 'ALT + S', OU CLICAMOS NO ÍCONE DE SALVAR, NA ABA SUPERIOR DO PGADMIN 4;

Aula: Trabalhando com JOINS

- Tipos de JOIN: JOIN (ou, INNER JOIN), LEFT JOIN (ou, LEFT OUTER JOIN), RIGTH JOIN (ou, RIGTH OUTER JOIN), FULL JOIN (ou, FULL OUTER JOIN), CROSS JOIN;

Aula: Otimizando o código com CTE

- Common Table Expressions - CTE;

- Definição CTE: forma auxiliar de organizar "statemants", ou seja, blocos de códigos, para consultas muito grandes, gerando tabelas temporárias e criando relacionamentos entre elas. Dentro dos statements podem ter: SELECTS, INSERTS, UPDATES, ou DELETES.

- WITH STATEMENT: Bloco de códigos, ele se equivale a um sub-select, porém mais legível, e organizado.

Aula: Como as Views auxiliam no acesso ao banco de dados

- Definição de Views: View são visões. São "camadas" para as tabelas. São "alias" para uma, ou mais queries. Aceitam comandos de SELECT, INSERT, UPDATE, e DELETE.

- OS COMANDOS: INSERT, UPDATE, e DELETE, SÃO EXCLUSIVOS A SOMENTE UMA TABELA, EM UMA VIEW.

- VIEWS são consideradas uma boa prática de segurança, pois ao invés de outros desenvolvedores tiverem acesso direto ao banco de dados, eles teram acesso somente as VIEWS criadas.

- Tipos de CREATE View: OR REPLACE (é um tipo, que remete ao conceito de idempotência), TEMP | TEMPORARY (presente apenas, na sessão do usuário, se você se desconectar, e conectar novamente, a VIEW não estará disponível), RECURSIVE (é uma VIEW recursiva, onde o comando em seu interior, chamara ela mesma, fazendo com que a mesma entre em loop, até que uma determinada condição, dentro da VIEW, seja satisfeita).

- Uma VIEW, pode ter parâmetros, como no exemplo abaixo (não precisamos inserir o tipo de dado nos parâmetros, pois os seus valores serão abstraídos a partir da operação realizada, dentro da VIEW):
	CREATE OR REPLACE VIEW vw_bancos (banco_numero, banco_nome, banco_ativo) AS (
		SELECT numero, nome, ativo
		FROM banco;
	);

	SELECT banco_numero, banco_nome, banco_ativo
	FROM vw_bancos;

- Se tivermos uma view com uma consulta, EM UMA TABELA, podemos realizar as operações de: INSERT, UPDATE, e DELETE, apenas fora do contexto da VIEW, como no exemplo abaixo:

	CREATE OR REPLACE VIEW vw_bancos AS (
		SELECT numero, nome, ativo
		FROM banco
	); -- Exemplo de VIEW OR REPLACE

	SELECT numero, nome, ativo
	FROM vw_bancos; -- Fazemos o SELECT na view, não na diretamente na tabela
	
	INSERT INTO vw_bancos (numero, nome, ativo) VALUES (100, 'Banco CEM', TRUE);
	UPDATE vw_bancos SET nome = 'Banco 100' WHERE numero = 100;
	DELETE FROM vw_bancos WHERE numero = 100;

- Exemplo de VIEW TEMPORARY:

	CREATE OR REPLACE TEMPORARY VIEW vw_bancos AS (
		SELECT numero, nome, ativo
		FROM banco;
	);

	SELECT numero, nome, ativo
	FROM vw_bancos;

- Exemplo de VIEW RECURSIVE:

	CREATE OR REPLACE RECURSIVE VIEW nome_da_view (campos_da_view) AS (
		SELECT base
		UNION ALL
		SELECT campos
		FROM tabela_base
		JOIN nome_da_view
	); -- O uso dos campos da view, e UNION ALL, são obrigatórios na implementação

- Tipos de comandos de união (UNION): UNION, e UNION ALL.

- A diferença entre UNION, e UNION ALL:

	UNION: agrupa (ou, unifica) resultados iguais;
	UNION ALL: não agrupa (ou, unifica) resultados iguais.

	Por exemplo: se tivermos duas linhas com o número 1, como resultado de uma consulta, e fazermos a mesma consulta com o UNION, ele irá nos devolver apenas uma linha, com o número 1. O UNION ALL, irá nos devolver duas linhas, com número 1.

- Exemplo de WITH OPTIONS:
	-- WITH LOCAL CHECK OPTION
	CREATE OR REPLACE VIEW vw_bancos AS (
		SELECT numero, nome, ativo
		FROM banco
		WHERE ativo IS TRUE
	)
	WITH LOCAL CHECK OPTION; -- Significa que você deseja validar as opções, da view presente.

	INSERT INTO vw_bancos
	(numero, nome, ativo) 
	VALUES (100, 'Banco CEM', FALSE); -- Será retornado um erro, pois a view espera um ativo TRUE

	-- WITH CASCADED CHECK OPTION
	CREATE OR REPLACE VIEW vw_bancos_ativos AS (
		SELECT numero, nome, ativo
		FROM banco
		WHERE ativo IS TRUE
	);

	CREATE OR REPLACE VIEW vw_bancos_maiores_que_100 AS (
		SELECT numero, nome, ativo
		FROM vw_bancos_ativos
		WHERE numero > 100
	)
	WITH CASCADED CHECK OPTIONS; -- Significa que você deseja validar as opções da VIEW atual, e das VIEWS, que ela faz referência.

	INSERT INTO vw_bancos_maiores_que_100
	(numero, nome, ativo) 
	VALUES (200, 'Banco CEM', FALSE); -- Será retornado um erro, pois a view espera um ativo TRUE

- Aula: Conheça um dos principais conceitos de banco de dados - transações

- Definição de Transações: Conceito fundamental, de todos os bancos de dados. Conceito de múltiplas etapas/códigos reunidos em apenas 1 transação, onde o resultado precisa ser TUDO ou NADA.

- BEGIN (ou, BEGIN TRANSACTION): Significa que você está abrindo uma transação.

- COMMIT: Significa que não ocorreu nenhum erro na transação, e a mesma pode ser de fato, efetivada.

- Exemplo de Transação:

	BEGIN;
		UPDATE conta
		SET valor = valor - 100.00
		WHERE nome = 'Alice';

		UPDATE conta
		SET valor = valor + 100.00
		WHERE nome = 'Bob';
	COMMIT; -- Caso ocorra algum problema durante a transação (no caso os updates), um ROLLBACK é chamado, cancelando assim a transação, caso o contrário ela é efetivada (COMMIT)

- As transações só podem ser enxergadas, após serem commitadas, ou seja, caso dois desenvolvedores estejam ainda realizando as transações, um não pode ver o que o outro está fazendo, até que a transação seja efetivada.

- Chamando um ROOLBACK, ao invés do BEGIN:

	BEGIN;
		UPDATE conta
		SET valor = valor - 100.00
		WHERE nome = 'Alice';

		UPDATE conta
		SET valor = valor + 100.00
		WHERE nome = 'Bob';
	ROLLBACK; - Cancela a transação, independente se aconteceu, ou não algum problema

- Usando um SAVEPOINT:

	BEGIN;
		UPDATE conta
		SET valor = valor - 100.00
		WHERE nome = 'Alice';

	SAVEPOINT my_savepoint;

		UPDATE conta
		SET valor = valor + 100.00
		WHERE nome = 'Bob';
		-- oops ... Não é para o Bob, é para o Wally !!!
		
	ROLLBACK TO my_savepoint; -- o código entre o SAVEPOINT e ROLLBACK, será ignorado, para que o código de baixo, seja executado

		UPDATE conta
		SET valor = valor + 100.00
		WHERE nome = 'Wally';
	COMMIT;
 	 